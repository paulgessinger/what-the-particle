name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run linting (ruff)
      run: uv run ruff check .

    - name: Run type checking (mypy)
      run: uv run mypy backend/

    - name: Run tests
      run: uv run pytest tests/test_api.py -v --cov=backend --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t particle-explorer .

    - name: Test Docker image
      run: |
        # Start container in background
        docker run -d -p 8000:8000 --name test-container particle-explorer

        # Wait for container to be ready
        sleep 30

        # Test if the application responds
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/docs || exit 1

        # Clean up
        docker stop test-container
        docker rm test-container

  frontend-build:
    name: Frontend Build Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Configure static adapter for build
      working-directory: ./frontend
      run: |
        # Configure SvelteKit to use static adapter (like Dockerfile does)
        sed -i "s/adapter-auto/adapter-static/g" svelte.config.js
        sed -i "s/adapter()/adapter({ fallback: 'index.html' })/g" svelte.config.js

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Check build output
      working-directory: ./frontend
      run: |
        # Verify build directory exists and has expected files
        ls -la build/
        [ -f "build/index.html" ] || exit 1
        [ -d "build/_app" ] || exit 1
        echo "Frontend build successful!"

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-build]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install 3.11

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      run: |
        uv sync --all-extras
        cd frontend && npm ci

    - name: Configure static adapter for build
      working-directory: ./frontend
      run: |
        # Configure SvelteKit to use static adapter (like Dockerfile does)
        sed -i "s/adapter-auto/adapter-static/g" svelte.config.js
        sed -i "s/adapter()/adapter({ fallback: 'index.html' })/g" svelte.config.js

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Start backend server
      run: |
        uv run python -m backend.main &
        echo $! > backend.pid

    - name: Wait for backend to be ready
      run: |
        # Wait up to 30 seconds for backend to start
        for i in {1..30}; do
          if curl -f http://localhost:8000/docs > /dev/null 2>&1; then
            echo "Backend is ready!"
            break
          fi
          echo "Waiting for backend... ($i/30)"
          sleep 1
        done

    - name: Run integration tests
      run: uv run pytest tests/test_integration.py -v

    - name: Cleanup
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
        fi
